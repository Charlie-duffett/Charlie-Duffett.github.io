---
layout: default
modal-id: 3
date: 2017-07-18
img: TowerDefence.jpg
alt: Top Down View of a Tower Defense Game
overview: After discussing my desire to create a game in Unreal Engine, my mentor suggested building upon the base Unreal Strategy game provided by Epic. Luckily, my mentor had upgraded the strategy game to work with Unreal Engine 5, making this project my first experience with the latest Unreal version. I established several goals for the project, including updating wave behavior, modifying the functionality of the arrow turret, and implementing a third-person mode within the game.
bullets: Added new wave start called buying where players will be able to buy towers without the threat of an on going wave, Created ready up mechanic to allow the player to build towers before the start of the first wave, Programmed simple UI to inform the player that they needed to ready up, Changed how the arrow turret worked by making it only fire in bursts when an enemy enters it's attack range, Spawned a minion for the player to play as while a wave is on going
demo: https://www.youtube.com/embed/Wmbgrydpwas
code: Code can be found on my <a href="https://github.com/Charlie-duffett/UE5StrategyGame"> Github</a>
lessons-learned: <b>Integration of Blueprints with C++</b>| Through the tower defense game project_ I gained a deeper understanding of the various methods by which Blueprints can interact with C++ code. This experience allowed me to leverage the strengths of both scripting and programming languages to create more robust and flexible game systems, <b>Character Switching and Control Scheme Implementation</b>| A significant learning experience from the project was implementing character switching mechanics and associated control schemes. This involved understanding the various methods of possessing minions within Unreal Engine and implementing a seamless return to the original minion when necessary, <b>Reflections on Input System Rework</b>| Reflecting on the project_ I identified opportunities for improvement in the input system. Given additional time_ I would prioritize reworking the input system to utilize enhanced input_ which is the current standard. The custom input implementation inherited from the base Epic game introduced avoidable bugs and limitations_ underscoring the significance of adopting standard input solutions for smoother and more reliable gameplay experiences
---
