---
layout: default
modal-id: 4
date: 2018-07-18
img: Toybox.png
alt: Game logo with the words "Toybox Titan"
overview: Toybox Titans is a 3 vs 1 multiplayer game set in a kids' bedroom. The objective is to destroy the defending toy in their crafted arena. After learning about the project from peers at CG Spectrum, I joined the team to contribute to creating a vertical slice. Over four months, myself and 20 other team members dedicated our efforts to designing, creating, and testing the game. Although there isn't footage from playtests available, the demo video provides a glimpse of some of the features I worked on and implemented.
bullets: Setup Perforce within Azure cloud for the whole team, Created combat mechanics using GAS (Melee, Ranged and Throwables), Implemented designer changable UI that hooked into Game logic e.g changing icon when ability is inactive, Created shaders to see some characters through the wall, Created shader for invisible wall that would only display when the player is close to the wall, Created camera modifiers to change camera behavour based on designer requested, Created simple blueprintable interface for the ability system that our designers could use to minimise there needed knowledge of the gameplay ability system, Worked closely with design to create configurable systems and gameplay elements that could fix player requirements, Created a series of tutorial videos to document how to modify values and what those values do
demo: https://www.youtube.com/embed/u7hPrw6P0K0
code: Code snippets are available on request
lessons-learned: <b>Adoption of Industry Standard Tools</b>| One of the key takeaways from the project was learning how to use the industry-standard tool Perforce for version control. This experience provided valuable insights into collaborative development workflows and improved project organization and management, <b>Multiplayer Gameplay Implementation</b>| I learned to implement gameplay features with multiplayer considerations_ ensuring smooth functionality for all players. For instance_ when implementing projectile mechanics_ I used techniques like lerping to maintain smooth visuals across multiplayer sessions. This experience emphasized the importance of designing features that work seamlessly in multiplayer environments, <b>Utilization of Unreal's Gameplay Ability System</b>| A significant learning experience from the project was understanding Unreal Engine's Gameplay Ability System. This provided a robust framework for implementing player abilities and managing gameplay mechanics_ enhancing the game's depth and complexity, <b>Reflection on Ranged Implementation</b>| In hindsight_ I identified opportunities for improvement in the ranged implementation. Splitting the ranged abilities into separate ability classes for each fire mode would have enhanced maintainability and organization_ addressing issues of complexity and facilitating easier updates and adjustments
---
