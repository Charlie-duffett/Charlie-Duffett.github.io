---
layout: default
modal-id: 5
date: 2019-07-18
img: Pumpkin.png
alt: Ghost holding a rake next to pumpkins
overview: Pumpkin Plot Plunder was conceived during a skills challenge as part of my coursework. We was tasked with creating a game within 8-weeks and was given the theme of Autumn Harvest. Our team chose to make a chaotic management game were players are tasked with ensuring their growing pumpkins are watered and harvested in time before they turn evil. Although we initially considered a Roguelike approach, time constraints led us to focus on refining the core mechanics of pumpkin management and harvesting. <br/><br/> <b>The project ended up winning the overall prize for the skills challenge</b>
bullets: Setup hub github repo with required GitIgnore so we could all contribute to the project. (Git used as its free and quick to setup), Created pumpkins with state system, Created multiple interfaces for Damage_ Interaction_ Watering and Using (Activating), Created multiple blueprint callable functions that could be used by designers to play sound or create UI, Created basic UI to walk to the player (Ran out of time to polish this better as the pumpkin walk speed changed last minute), Mentored other members on the team how to use Git and some parts of Unreal Engine such as blueprints
demo: https://www.youtube.com/embed/wcNChvJrvec
code: The code for this project can be found on my <a href="https://github.com/Charlie-duffett/PumpkinPlotPlunders">Github</a>
lessons-learned: Scope Management| In hindsight_ we should have further reduced the scope of the project to prioritize refining the core gameplay mechanics. By focusing on fewer features_ we could have despent more time ensuring that each feature felt polished and engaging, Feedback and Immersion| We realized the importance of having visual and audio effects/cues to enhance player feedback and immersion. For instance, implementing visual cues for pumpkin attacks would have made the gameplay more clear and fair for players, Early Playtesting| We recognized the value of involving playtesters earlier in development. Their feedback could have helped identify potential issues and opportunities for improvement_ resulting in a better game by the end of the project, Designer-Friendly Systems| One of the key takeaways was learning how to create systems and actors that are easy for designers to interface with_ while requiring minimal support. This skill not only improves collaboration within the team but also streamlines the development process_ leading to more efficient iteration and refinement of features/mechanics,
---
